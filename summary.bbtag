{execcc;haspermissions}
{execcc;lib}

{ if; { flagset; h }; {output;
```
Parameters:
  -h  Show this help
  -d  {realpad;<buffedclanaverage>;25} BUFFed clan average, e.g. 5.5
  -x  {realpad;Where x is between 1 to 8;25} This will set full void for the particular titan in sequence
      e.g. -1 -4 ==> Full void for terro at position 1, 4
```
}{return}}

{if; {length; {get; _{category}raidtierzone}}; ==; 0; {output;Raid not set, please {prefix}raidset first}}

{set; ~summarydata; {jclean;{jget; _{category}cache; {get; _{category}raidtierzone}}}}
{set; ~computeddata; {jclean;{jget; _{category}cache; {get; _{category}raidtierzone}.computed}}}

{//; calculate cycle prediction here}
{set; ~raidtier; {shift; {split; {get; _{category}raidtierzone}; -}}}
{set; ~hitspercycle;
  {switch; {get; ~raidtier};
    9999; 6;
    6; 6;
    5; 6;
    4; 5;
    3; 4;
    2; 4;
    1; 4;
  }
}

{set; ~flagset; {if; {flagset;v}; 
  {split;{flag; v};}
}}

{set; ~bavgmil; {if; {flagset;d}; 
  {flag; d}
;
  {jget; ~computeddata; bavg}
}}
{set; ~bavg; {math;*;{parsefloat;
  {get; ~bavgmil}
};1000000}} {jset; _{category}cache; summary.bavg; {get; ~bavg}; create}
{set; ~titansequence; {split;{jget; ~summarydata; flags};}}
{set; ~totaltitans; {length;{get;~titansequence}}}
{set; ~totalhitpercycle; {math;*;{get; _{category}activeraidpower};{get;~hitspercycle}}}

{set; ~overflowdmg; 0}
{set; ~hitsused; 0}
{set; ~totalhitsincycle; 0}

{set; ~phases; ["Prism", "IV", "VM", "dead"]}
{set; ~currentcycle; 0}
{set; ~cycledetails; [{j;{}}]}
{set; ~cycleremaininghits; {get; ~totalhitpercycle}}
{set; ~hitsusedlabel; 0}
{set; ~isfullivdefault; {func.parsebool;{jget;_{category}raidconfig;fulliv}}}

{set;~debug; []}
{for;~index;1;<;4;

{set;~sequence;{split;{jget;~computeddata;titan{get;~index}.armorsequence};}}
{set;~strat;{split;{jget;~computeddata;titan{get;~index}.strat};}}
{set;~stratsequence;[]}
{for;~i;0;<;8;
  {push;~stratsequence;{math;*;{jget;~strat;{get;~i}};{jget;~sequence;{get;~i}}}}
}

{set;~cursedpart{get;~index};{map;~part;{jget; ~summarydata; curse{get;~index}.parts};{substring;{get;~part};0;1}}}
{set;~cursedsequence;[]}
{set;~armorsequence;[]}
{for;~i;1;<;9;
  {set;~indexof;{indexof;{get;~stratsequence};{get;~i}}}
  {if;{get;~indexof};>;-1;
    {set;~partid;{math;+;{get;~indexof};2}}
    {if;{indexof;{get;~cursedpart{get;~index}};{get;~partid}};>;-1;
      {push;~cursedsequence;{get;~partid}}
    ;
      {push;~armorsequence;{get;~partid}}
    }
  }
}
{set;~armorpriority{get;~index};{concat;{get;~cursedsequence};{get;~armorsequence}}}

}

{set;~alltitanarmorpriority;[]}

{for;~index;0;<;{get; ~totaltitans};
  {set; ~enemyid; {jget;~titansequence;{get;~index}}}
  {set; ~titanhp; {jget; ~computeddata; titan{get;~enemyid}.hp}}
  {set; ~flagsetindex; {bool;{indexof;{get;~flagset};{math;+;{get; ~index};1}};!=;-1}}

  {set; ~basehp; {jget; ~computeddata; titan{get;~enemyid}.basehp}}
  {set; ~basehphits; {math;/;
    {parsefloat;{get;~basehp}};
    {parsefloat;{get;~bavg}}
  }}

  {jset; ~cycledetails; {get;~currentcycle}.titans.{get;~index}.label; {jget; ~computeddata; titan{get;~enemyid}.name}; create}
  
  {set; ~titanhpnonvma; {parsefloat;{jget; ~computeddata; titan{get;~enemyid}.hpprcnta}} }
  {decrement; ~titanhpnonvma; 
    {if; {get;~flagsetindex};
      {if;{get;~isfullivdefault};==;true;{parsefloat;{jget; ~computeddata; titan{get;~enemyid}.vm.hpprcnta}};0}
      ;
      {if;{get;~isfullivdefault};==;true;0;{parsefloat;{jget; ~computeddata; titan{get;~enemyid}.vm.hpprcnta}}}
    }
  ; false}

  {set; ~titanhitsnonvma; {math;*;
    {get;~titanhpnonvma};
    {get;~basehphits}
  }}
  {jset; _{category}cache; summary.titan{get;~enemyid}.hits.nonvma; {get;~titanhitsnonvma}; create}
  
  {set; ~titanhpnonvmb; {math;-;
    {parsefloat;{jget; ~computeddata; titan{get;~enemyid}.hpprcntb}};
    {parsefloat;{jget; ~computeddata; titan{get;~enemyid}.vm.hpprcntb}}
  }}
  {set; ~titanhitsnonvmb; {math;*;
    {get;~titanhpnonvmb};
    {get;~basehphits}
  }}
  {jset; _{category}cache; summary.titan{get;~enemyid}.hits.nonvmb; {get;~titanhitsnonvmb}; create}
  
  {set; ~titanvmhpa; {math;*;
    {parsefloat;{jget; ~computeddata; titan{get;~enemyid}.vm.hpprcnta}};
    {get;~basehphits}
  }}
  {set; ~titanhitsvma; {if; {get;~flagsetindex};
    {if;{get;~isfullivdefault};==;true;{get;~titanvmhpa};0}
    ;
    {if;{get;~isfullivdefault};==;true;0;{get;~titanvmhpa}}
  }}
  {set; ~titanhitsvmb; {math;*;
    {math;-;
      {parsefloat;1.0};
      {parsefloat;{get;~titanhpnonvmb}}
    };
    {get;~basehphits}
  }}
  {set; ~titanhitsvm; {math;+;
    {get; ~titanhitsvma};
    {get; ~titanhitsvmb}
  }}
  {jset; _{category}cache; summary.titan{get;~enemyid}.hits.vma; {get;~titanhitsvma}; create}
  {jset; _{category}cache; summary.titan{get;~enemyid}.hits.vmb; {get;~titanhitsvmb}; create}
  {jset; _{category}cache; summary.titan{get;~enemyid}.hits.vm; {get;~titanhitsvm}; create}

  {push;~alltitanarmorpriority;{get;~armorpriority{get;~enemyid}}}

  {set; ~titanarmorhitsleft; {get;~titanhitsnonvma}}
  {set; ~titanbodyhitsleft; {get;~basehphits}}
  
  {set; ~cyclesteps; []}
  {foreach;~phase;~phases;
    {switch;{get;~phase};
      Prism;
        {set; ~hitsused; 0}
        {set; ~emoji; <:Prism:859797057102544927>}
      ;
      
      IV;
        {set;~voidparts;{length;{regexmatch;{jget;~computeddata; titan{get;~enemyid}.strat};/1/g}}}
        {decrement;~voidparts;{if;{get;~titanhitsvma};==;0;0;1}}

        {set; ~hitsused; {get;~titanhitsnonvma}}
        {set; ~hitsusedlabel; {get;~hitsused}}
        {set; ~emoji; <:IV:859792058205077524>{space}{get;~voidparts}p}
        {decrement; ~titanarmorhitsleft; {get; ~hitsused}; false}
      ;
      
      VM;
        {set; ~hitsused; {get;~titanhitsnonvmb}}
        {set; ~hitsusedlabel; {get;~hitsused}}
        {set; ~emoji; <:VM:859792074672832512>}
        {decrement; ~titanbodyhitsleft; {get; ~hitsused}; false}
      ;
      
      dead;
        {set; ~hitsused; {get;~titanhitsvm}}
        {set; ~hitsusedlabel; {get;~hitsused}}
        {set; ~emoji; <:dead:859792109861863444>}
      ;
    }
    {increment; ~totalhitsincycle; {get;~hitsused}; false}
    
    {if;{get;~cycleremaininghits};>=;{get;~hitsused};
      {set; ~hitcycleprcnt; {math;/; {ceil;{get;~totalhitsincycle}}; {get; ~totalhitpercycle}}}
      {set; ~hitcycleprcnt; {if; {get;~hitcycleprcnt}; <=; 0.4;Early;{if; {get;~hitcycleprcnt}; <=; 0.7;Mid;Late}}}
      
      {push; ~cyclesteps; {get; ~emoji} {get; ~hitcycleprcnt} ({ceil;{get;~totalhitsincycle}}){space}}
    ;
      {//; next cycle}
      {//; push; ~cyclesteps; {repeat;{space};6}{get; ~emoji} {get; ~hitcycleprcnt} ({ceil;{get;~totalhitsincycle}}){space}}
      
      {decrement; ~hitsusedlabel; {get;~cycleremaininghits}; false}
      {decrement; ~totalhitsincycle; {get; ~totalhitpercycle}; false}
      {increment; ~cycleremaininghits; {get; ~totalhitpercycle}; false}

      {switch;{get;~phase};
        IV;
          {increment; ~titanarmorhitsleft; {get; ~totalhitsincycle}; false}
          {push; ~cyclesteps; ArmorLeft: {numformat;
            {math;/;{math;*;{get; ~titanarmorhitsleft};{parsefloat;{get;~bavg}}};1000000}
          ;2}M}
          {decrement; ~titanarmorhitsleft; {get; ~totalhitsincycle}; false}
        ;

        VM;
          {increment; ~titanbodyhitsleft; {get; ~totalhitsincycle}; false}
          {push; ~cyclesteps; HPLeft: {numformat;
            {math;/;{math;*;{get; ~titanbodyhitsleft};{parsefloat;{get;~bavg}}};1000000}
          ;2}M}
          {decrement; ~titanbodyhitsleft; {get; ~totalhitsincycle}; false}
        ;
        
        dead;
          {push; ~cyclesteps; HPLeft: {numformat;
            {math;/;
              {math;*;{min;{get;~titanhitsvmb};{get; ~totalhitsincycle}};{parsefloat;{get;~bavg}}}
              ;1000000}
          ;2}M}
        ;
        
        {push; ~cyclesteps; HPLeft: {numformat; {math;/;{get;~basehp};1000000};2}M}
      }
      
      {jset; ~cycledetails; {get;~currentcycle}.titans.{get;~index}.steps; {get; ~cyclesteps}; create}
      {set; ~cyclesteps; []}
      
      {set; ~hitcycleprcnt; {math;/; {ceil;{get;~totalhitsincycle}}; {get; ~totalhitpercycle}}}
      {set; ~hitcycleprcnt; {if; {get;~hitcycleprcnt}; <=; 0.4;Early;{if; {get;~hitcycleprcnt}; <=; 0.7;Mid;Late}}}
      
      {push; ~cyclesteps; {get; ~emoji} {get; ~hitcycleprcnt} ({ceil;{get;~totalhitsincycle}}){space}}
      
      {increment; ~currentcycle}
      {push; ~cycledetails; {j;{}}}
      {jset; ~cycledetails; {get;~currentcycle}.titans.{get;~index}.label; {jget; ~computeddata; titan{get;~enemyid}.name}; create}
      {jset; ~cycledetails; {get;~currentcycle}.titans.{get;~index}.voidparts; {get;~voidparts}; create}
    }
    {decrement; ~cycleremaininghits; {get;~hitsused}; false}
  }
  
  {jset; ~cycledetails; {get;~currentcycle}.titans.{get;~index}.steps; {get; ~cyclesteps}; create}
}

{jset; _{category}activeraid; titanarmorsequence; {get;~alltitanarmorpriority}; create}

{jset; _{category}cache; summary.cycledetails; {get;~cycledetails}; create}

{set; ~embed; {j;{}}}
{jset; ~embed; title; {get; _{category}raidtierzone} Strat @ {numformat;{get; ~bavgmil};2}M avg DMG;create}
{jset; ~embed; description; RaidBuff : {jget; ~computeddata; buff.text}{newline}RaidMod : {numformat;{jget; ~computeddata; raidmod};2}{newline}MoraleBuff : +{get; _{category}activeraidmorale}% ;create}

{set; ~embedfields; []}

{for;~index;1;<;4;

{set; ~humanestrat; {split;{regexreplace;{regexreplace;{jget;~computeddata;titan{get;~index}.strat};/1/gi;O};/0/gi;X};}}
{foreach;~elem;{get;~cursedpart{get;~index}};
  {set;~partindex;{parseint;{math;-;{get;~elem};2}}}
  {if;{jget;~humanestrat;{get;~partindex}};==;O;
    {jset;~humanestrat;{get;~partindex};C}
  }
}

{jset; ~embed; footer.text; Disclaimer:{newline}Strategy are subject to change depends on actual progress.{newline}Stay tuned for any announcement.;create}

{set; ~embedfield; {j}}
{jset; ~embedfield; name; {jget; ~computeddata; titan{get;~index}.name} ;create}
{jset; ~embedfield; value; {jget; ~computeddata; debuff{get;~index}.text}{newline}```
 {jget;~humanestrat;2} {jget;~humanestrat;0} {jget;~humanestrat;7}  Curse:
 {jget;~humanestrat;3} {jget;~humanestrat;1} {jget;~humanestrat;6}  {func.curseacro;{jget; ~summarydata; curse{get;~index}.bonus_type}}
  {jget;~humanestrat;4} {jget;~humanestrat;5}```;create}
{jset; ~embedfield; inline; true ;create}
{push; ~embedfields; {get; ~embedfield}}

}

{for;~index;0;<;{length;{get;~cycledetails}};
{set; ~embedfield; {j}}
{jset; ~embedfield; name; Cycle {math;+;{get;~index};1} ;create}
{jset; ~embedfield; value; {foreach;~element;{jkeys; ~cycledetails; {get;~index}.titans};{set; ~steps; {jget; ~cycledetails; {get;~index}.titans.{get;~element}.steps}}{jget; ~cycledetails; {get;~index}.titans.{get;~element}.label} (#{math;+;{get;~element};1}/{get;~totaltitans}):
{foreach;~step;~steps;
{space}{space}{get;~step}{newline}
}
};create}
{push; ~embedfields; {get; ~embedfield}}
}

{jset; ~embed; fields; {get; ~embedfields} ;create}

{output; {embed;{jclean;{get; ~embed}}}}
